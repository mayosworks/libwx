//=============================================================================
// Auxiliary library for Windows API (C++)
//                                                     Copyright (c) 2007 MAYO.
//=============================================================================
#pragma once

namespace wx {

//-----------------------------------------------------------------------------
//! @class	IWindowListener
//! @brief	ウィンドウメッセージリスナークラス
//-----------------------------------------------------------------------------
class IWindowListener
{
public:
	//-------------------------------------------------------------------------
	//! @brief	デストラクタ
	//-------------------------------------------------------------------------
	virtual ~IWindowListener() {}

	//-------------------------------------------------------------------------
	//! @brief	Windowメッセージ受信
	//!
	//! @param	hwnd	ウィンドウハンドル
	//! @param	msg		ウィンドウメッセージ
	//! @param	wp		パラメータ１
	//! @param	lp		パラメータ２
	//!
	//! @return	メッセージ処理結果
	//-------------------------------------------------------------------------
	virtual LRESULT RecvMessage(HWND hwnd, UINT msg, WPARAM wp, LPARAM lp) = 0;
};

//-----------------------------------------------------------------------------
//! @class	Window
//! @brief	ウィンドウ
//-----------------------------------------------------------------------------
class Window
{
public:
	//-------------------------------------------------------------------------
	//! @brief	コンストラクタ
	//-------------------------------------------------------------------------
	Window();

	//-------------------------------------------------------------------------
	//! @brief	デストラクタ
	//-------------------------------------------------------------------------
	virtual ~Window();

	//-------------------------------------------------------------------------
	//! @brief	ウィンドウリスナー設定
	//!
	//! @param	listener	ウィンドウリスナー
	//-------------------------------------------------------------------------
	void SetListener(IWindowListener* listener);

	//-------------------------------------------------------------------------
	//! @brief	ウィンドウクラスを保持するインスタンス設定
	//!
	//! @param	instance	インスタンスハンドル
	//-------------------------------------------------------------------------
	void SetInstance(HINSTANCE instance);

	//-------------------------------------------------------------------------
	//! @brief	ウィンドウクラスカーソル設定
	//!
	//! @param	cursor		カーソル
	//-------------------------------------------------------------------------
	void SetClassCursor(HCURSOR cursor);

	//-------------------------------------------------------------------------
	//! @brief	ウィンドウクラスアイコン（大）設定
	//!
	//! @param	icon		アイコン
	//-------------------------------------------------------------------------
	void SetClassIconL(HICON icon);

	//-------------------------------------------------------------------------
	//! @brief	ウィンドウクラスアイコン（小）設定
	//!
	//! @param	icon		アイコン
	//-------------------------------------------------------------------------
	void SetClassIconS(HICON icon);

	//-------------------------------------------------------------------------
	//! @brief	ウィンドウクラスブラシ設定
	//!
	//! @param	brush		ブラシ
	//-------------------------------------------------------------------------
	void SetClassBrush(HBRUSH brush);

	//-------------------------------------------------------------------------
	//! @brief	ウィンドウタイトル設定（ウィンドウ生成後のみ設定可）
	//!
	//! @param	title		ウィンドウタイトル
	//-------------------------------------------------------------------------
	void SetWindowTitle(PCTSTR title);

	//-------------------------------------------------------------------------
	//! @brief	クライアント領域のサイズ設定
	//!
	//! @param	width		クライアント領域のウィンドウ幅
	//! @param	height		クライアント領域のウィンドウ高さ
	//-------------------------------------------------------------------------
	void SetClientSize(int width, int height);

	//-------------------------------------------------------------------------
	//! @brief	クライアント領域の幅取得
	//!
	//! @return	クライアント領域の幅
	//-------------------------------------------------------------------------
	int GetClientWidth() const;

	//-------------------------------------------------------------------------
	//! @brief	クライアント領域の高さ取得
	//!
	//! @return	クライアント領域の高さ
	//-------------------------------------------------------------------------
	int GetClientHeight() const;

	//-------------------------------------------------------------------------
	//! @brief	ウィンドウスタイル設定
	//!
	//! @param	style		ウィンドウスタイル
	//-------------------------------------------------------------------------
	void SetWindowStyle(DWORD style);

	//-------------------------------------------------------------------------
	//! @brief	拡張ウィンドウスタイル設定
	//!
	//! @param	ex_style	拡張ウィンドウスタイル
	//-------------------------------------------------------------------------
	void SetWindowStyleEx(DWORD ex_style);

	//-------------------------------------------------------------------------
	//! @brief	ウィンドウスタイル取得
	//!
	//! @return	ウィンドウスタイル
	//-------------------------------------------------------------------------
	DWORD GetWindowStyle() const;

	//-------------------------------------------------------------------------
	//! @brief	拡張ウィンドウスタイル取得
	//!
	//! @return	拡張ウィンドウスタイル
	//-------------------------------------------------------------------------
	DWORD GetWindowStyleEx() const;

	//-------------------------------------------------------------------------
	//! @brief	ウィンドウ生成
	//!
	//! @param	classname	ウィンドウクラス名
	//!
	//! @retval	true		生成成功
	//! @retval	false		生成失敗
	//-------------------------------------------------------------------------
	bool Create(PCTSTR classname = NULL);

	//-------------------------------------------------------------------------
	//! @brief	ウィンドウ破棄
	//-------------------------------------------------------------------------
	void Destroy();

	//-------------------------------------------------------------------------
	//! @brief	ウィンドウハンドル取得
	//!
	//! @return	ウィンドウハンドル
	//-------------------------------------------------------------------------
	HWND GetHandle() const;

private:
	// コールバック
	static LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wp, LPARAM lp);

private:
	WNDCLASSEX			m_wndclass;
	DWORD				m_style;
	DWORD				m_ex_style;
	HWND				m_hwnd;
	int					m_width;
	int					m_height;
	IWindowListener*	m_listener;
};

} //namespace wx
