//=============================================================================
// Auxiliary library for Windows API (C++)
//                                                     Copyright (c) 2007 MAYO.
//=============================================================================
#pragma once

#include <new>
#include "wx_misc.h"

namespace wx {

//-----------------------------------------------------------------------------
//! @struct	MemoryStatus
//! @brief	メモリ状態
//-----------------------------------------------------------------------------
struct MemoryStatus
{
	UINT total_size;///< 全体（仮想メモリの予約＋コミット分）
	UINT used_size;	///< 使用済み
	UINT free_size;	///< 空き
	UINT max_size;	///< 最大の確保可能なサイズ
	UINT block_num;	///< ブロック数
};


//-----------------------------------------------------------------------------
//! @class	Memory
//! @brief	メモリ管理
//-----------------------------------------------------------------------------
class Memory
{
public:
	//-------------------------------------------------------------------------
	//! @brief	メモリ管理を初期化する
	//!
	//! @param	size		通常メモリ確保用に確保するメモリサイズ、固定
	//! @param	flags		ヒープ挙動フラグ(MEM_XXX)
	//!
	//! @retval	true		初期化成功
	//! @retval	false		初期化失敗
	//-------------------------------------------------------------------------
	static bool Initialize(UINT size, UINT flags);

	//-------------------------------------------------------------------------
	//! @brief	メモリ管理を終了する
	//!
	//! @note	解放後、確保したメモリは無効になります。
	//-------------------------------------------------------------------------
	static void Finalize();

	//-------------------------------------------------------------------------
	//! @brief	メモリ確保
	//!
	//! @param	size		メモリサイズ
	//!
	//! @return	確保したメモリへのポインタ、失敗時はNULL
	//-------------------------------------------------------------------------
	static void* Alloc(size_t size);

	//-------------------------------------------------------------------------
	//! @brief	Allocで確保したメモリの解放
	//!
	//! @param	mem			解放するメモリのポインタ
	//-------------------------------------------------------------------------
	static void Free(void* mem);

	//-------------------------------------------------------------------------
	//! @brief	メモリにタグを設定（タグ内容はDump時に出力します）
	//!
	//! @param	mem			タグを設定するメモリ
	//! @param	tag			タグ文字列
	//-------------------------------------------------------------------------
	static void SetTag(void* mem, const char* tag);

	//-------------------------------------------------------------------------
	//! @brief	メモリ情報を取得する
	//!
	//! @param	status		メモリ情報[OUT]
	//-------------------------------------------------------------------------
	static void GetStatus(MemoryStatus& status);

	//-------------------------------------------------------------------------
	//! @brief	システム全体の空きメモリサイズを取得
	//!
	//! @return	空きメモリサイズ
	//-------------------------------------------------------------------------
	static UINT GetGlobalFreeSize();

	//-------------------------------------------------------------------------
	//! @brief	確保されているメモリをダンプする
	//-------------------------------------------------------------------------
	static void Dump();

public:
	//-------------------------------------------------------------------------
	//! @brief	システムが用意したプロセスヒープからのメモリ確保
	//!
	//! @note	状態に関係なく確保・解放ができますが、タグ付けはできません。
	//!			ここで確保したメモリは、GetStatus()等では報告しません。
	//!
	//! @param	size		メモリサイズ
	//!
	//! @return	確保したメモリへのポインタ、失敗時はNULL
	//-------------------------------------------------------------------------
	static void* SysAlloc(size_t size);

	//-------------------------------------------------------------------------
	//! @brief	SysAllocで確保したメモリの解放
	//!
	//! @param	mem			解放するメモリのポインタ
	//-------------------------------------------------------------------------
	static void SysFree(void* mem);

public:
	// メモリ確保時のフラグ
	static const UINT MEM_NOSER	= (1 <<  0);	///< 排他制御なし、シングルスレッド用
	static const UINT MEM_CLEAR	= (1 <<  1);	///< メモリ確保時にブロックを０クリア

private:
	Memory();
	~Memory();
};

} //namespace wx


//-----------------------------------------------------------------------------
// new/delete デバッグ用オーバーライド
//-----------------------------------------------------------------------------
#if _DEBUG
void* operator new   (size_t size, const char* file, int line);
void* operator new [](size_t size, const char* file, int line);
void operator delete   (void* mem, const char* file, int line);
void operator delete [](void* mem, const char* file, int line);
#endif //_DEBUG

//-----------------------------------------------------------------------------
// メモリ関連マクロ
//-----------------------------------------------------------------------------

// メモリ確保用マクロ
#if _DEBUG
#define NEW				new (__FILE__, __LINE__)
#define MEMTAG(mem,tag)	{ wx::Memory::SetTag(mem, tag); }
#else
#define NEW				new
#define MEMTAG(mem,tag)
#endif //_DEBUG
